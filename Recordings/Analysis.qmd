```{r}

library(readr)
library(dplyr)
library(ggplot2)
library(matlib)
library(tidyr)
library(Directional)
library(RSpincalc)

```


```{r}

i <- 1;
setwd("/cloud/project/Recordings/Sorting");

nameRB1 <- expand.grid('US',1:9,'RB.csv');
nameRB1 <- apply(nameRB1,1,paste0,collapse = "");
nameLR1 <- expand.grid('US',1:9,'LR.csv');
nameLR1 <- apply(nameLR1,1,paste0,collapse = "");
nameVR1 <- expand.grid('US',1:9,'VR.csv');
nameVR1 <- apply(nameVR1,1,paste0,collapse = "");


while (i < 10) {

  setwd("/cloud/project/Recordings/Sorting");
  
dataRB <- read.csv(file = nameRB1[i]);
dataLR <- read.csv(file = nameLR1[i]);
dataVR <- read.csv(file = nameVR1[i]);

dataRB <- dataRB %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataLR <- dataLR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataVR <- dataVR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement,FocusedObject,RayOrigin_x,RayOrigin_y,RayOrigin_z,RayDirection_x,RayDirection_y,RayDirection_z)

dataRB[dataRB == ""] <- NA;
dataLR[dataLR == ""] <- NA;
dataVR[dataVR == ""] <- NA;

dataRB <- dataRB %>%
  drop_na(Phase)
dataLR <- dataLR %>%
  drop_na(Phase)
dataVR <- dataVR %>%
  drop_na(Phase)

# dataRB[,'Rxx'] <- NA
# dataRB[,'Rxy'] <- NA
# dataRB[,'Rxz'] <- NA
# dataRB[,'Ryx'] <- NA
# dataRB[,'Ryy'] <- NA
# dataRB[,'Ryz'] <- NA
# dataRB[,'Rzx'] <- NA
# dataRB[,'Rzy'] <- NA
# dataRB[,'Rzz'] <- NA
dataRB[,'Px'] <- NA
dataRB[,'Py'] <- NA
dataRB[,'Pz'] <- NA
# dataRB[,'Ptx'] <- NA
# dataRB[,'Pty'] <- NA
# dataRB[,'Ptz'] <- NA
# 
# dataLR[,'Rxx'] <- NA
# dataLR[,'Rxy'] <- NA
# dataLR[,'Rxz'] <- NA
# dataLR[,'Ryx'] <- NA
# dataLR[,'Ryy'] <- NA
# dataLR[,'Ryz'] <- NA
# dataLR[,'Rzx'] <- NA
# dataLR[,'Rzy'] <- NA
# dataLR[,'Rzz'] <- NA
dataLR[,'Px'] <- NA
dataLR[,'Py'] <- NA
dataLR[,'Pz'] <- NA
# dataLR[,'Ptx'] <- NA
# dataLR[,'Pty'] <- NA
# dataLR[,'Ptz'] <- NA
# 
# dataVR[,'Rxx'] <- NA
# dataVR[,'Rxy'] <- NA
# dataVR[,'Rxz'] <- NA
# dataVR[,'Ryx'] <- NA
# dataVR[,'Ryy'] <- NA
# dataVR[,'Ryz'] <- NA
# dataVR[,'Rzx'] <- NA
# dataVR[,'Rzy'] <- NA
# dataVR[,'Rzz'] <- NA
dataVR[,'Px'] <- NA
dataVR[,'Py'] <- NA
dataVR[,'Pz'] <- NA
# dataVR[,'Ptx'] <- NA
# dataVR[,'Pty'] <- NA
# dataVR[,'Ptz'] <- NA

# dataRB[,'Cx'] <- NA
# dataRB[,'Cy'] <- NA
# dataRB[,'Cz'] <- NA
# dataRB[,'Ctx'] <- NA
# dataRB[,'Cty'] <- NA
# dataRB[,'Ctz'] <- NA
# 
# dataLR[,'Cx'] <- NA
# dataLR[,'Cy'] <- NA
# dataLR[,'Cz'] <- NA
# dataLR[,'Ctx'] <- NA
# dataLR[,'Cty'] <- NA
# dataLR[,'Ctz'] <- NA
# 
# dataVR[,'Cx'] <- NA
# dataVR[,'Cy'] <- NA
# dataVR[,'Cz'] <- NA
# dataVR[,'Ctx'] <- NA
# dataVR[,'Cty'] <- NA
# dataVR[,'Ctz'] <- NA

dataRB[,'pitch'] <- NA
dataRB[,'yaw'] <- NA

dataLR[,'pitch'] <- NA
dataLR[,'yaw'] <- NA

dataVR[,'pitch'] <- NA
dataVR[,'yaw'] <- NA

dataRB[,'V'] <- NA

dataLR[,'V'] <- NA

dataVR[,'V'] <- NA

dataRB[,'Va'] <- NA

dataLR[,'Va'] <- NA

dataVR[,'Va'] <- NA

dataRB[,'P2x'] <- NA
dataRB[,'P2y'] <- NA
dataRB[,'P2z'] <- NA
dataLR[,'P2x'] <- NA
dataLR[,'P2y'] <- NA
dataLR[,'P2z'] <- NA
dataVR[,'P2x'] <- NA
dataVR[,'P2y'] <- NA
dataVR[,'P2z'] <- NA

dataRB[,'pitch2'] <- NA
dataRB[,'yaw2'] <- NA

dataLR[,'pitch2'] <- NA
dataLR[,'yaw2'] <- NA

dataVR[,'pitch2'] <- NA
dataVR[,'yaw2'] <- NA


# dataRB[,'angle'] <- NA
# dataLR[,'angle'] <- NA
# dataVR[,'angle'] <- NA
# 
# dataRB[,'angle2'] <- NA
# dataLR[,'angle2'] <- NA
# dataVR[,'angle2'] <- NA

dataRB[,'V2'] <- NA

dataLR[,'V2'] <- NA

dataVR[,'V2'] <- NA

dataRB[,'V2a'] <- NA

dataLR[,'V2a'] <- NA

dataVR[,'V2a'] <- NA


#Start RB

#This seems to somewhat work


#Calibration RB

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataRB$Phase[c0] == "Calibration") {
  calw <- dataRB$wquat[c0]# + calw;
  calx <- dataRB$xquat[c0]# + calx;
  caly <- dataRB$yquat[c0]# + caly;
  calz <- dataRB$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataRB)+1) {


  # q0 <- dataRB$wquat[c1];
  # q1 <- dataRB$xquat[c1];
  # q2 <- dataRB$yquat[c1];
  # q3 <- dataRB$zquat[c1];

q0 <- dataRB$wquat[c1];
q1 <- -dataRB$xquat[c1];
q2 <- -dataRB$zquat[c1];
q3 <- -dataRB$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataRB$pitch[c1] = round(pitch,7)
  dataRB$yaw[c1] = round(yaw,7)
  #dataRB$angle[c1] = round(angle,7)
  
  dataRB$Px[c1] = round(Pnt[1],7)
  dataRB$Py[c1] = round(Pnt[2],7)
  dataRB$Pz[c1] = round(Pnt[3],7)
  
  #dataRB$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataRB$Px[c1-2],dataRB$Py[c1-2],dataRB$Pz[c1-2]);
  P_current <- c(dataRB$Px[c1-1],dataRB$Py[c1-1],dataRB$Pz[c1-1]);
  P_post <- c(dataRB$Px[c1],dataRB$Py[c1],dataRB$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataRB$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataRB$Va[c1-2] <- round(((dataRB$V[c1-2]-dataRB$V[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V[c1-1]-dataRB$V[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataRB$Phase[c0] == "Calibration") {
  xrot <- dataRB$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataRB$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataRB$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataRB)+1) {
  
  
  xrot <- dataRB$xrot[c1]/180*pi# + xrot;
  yrot <- dataRB$yrot[c1]/180*pi# + yrot;
  zrot <- dataRB$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataRB$pitch2[c1] = round(pitch,7)
  dataRB$yaw2[c1] = round(yaw,7)
  #dataRB$angle2[c1] = round(angle,7)
  
  dataRB$P2x[c1] = round(Pnt[1],7)
  dataRB$P2y[c1] = round(Pnt[2],7)
  dataRB$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataRB$P2x[c1-2],dataRB$P2y[c1-2],dataRB$P2z[c1-2]);
  P_current <- c(dataRB$P2x[c1-1],dataRB$P2y[c1-1],dataRB$P2z[c1-1]);
  P_post <- c(dataRB$P2x[c1],dataRB$P2y[c1],dataRB$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataRB$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataRB$V2a[c1-2] <- round(((dataRB$V2[c1-2]-dataRB$V2[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V2[c1-1]-dataRB$V2[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END RB
  
  #Start LR
 
#This seems to somewhat work


#Calibration LR

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataLR$Phase[c0] == "Calibration") {
  calw <- dataLR$wquat[c0]# + calw;
  calx <- dataLR$xquat[c0]# + calx;
  caly <- dataLR$yquat[c0]# + caly;
  calz <- dataLR$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataLR)+1) {


  # q0 <- dataLR$wquat[c1];
  # q1 <- dataLR$xquat[c1];
  # q2 <- dataLR$yquat[c1];
  # q3 <- dataLR$zquat[c1];

q0 <- dataLR$wquat[c1];
q1 <- -dataLR$xquat[c1];
q2 <- -dataLR$zquat[c1];
q3 <- -dataLR$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataLR$pitch[c1] = round(pitch,7)
  dataLR$yaw[c1] = round(yaw,7)
  #dataLR$angle[c1] = round(angle,7)
  
  dataLR$Px[c1] = round(Pnt[1],7)
  dataLR$Py[c1] = round(Pnt[2],7)
  dataLR$Pz[c1] = round(Pnt[3],7)
  
  #dataLR$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataLR$Px[c1-2],dataLR$Py[c1-2],dataLR$Pz[c1-2]);
  P_current <- c(dataLR$Px[c1-1],dataLR$Py[c1-1],dataLR$Pz[c1-1]);
  P_post <- c(dataLR$Px[c1],dataLR$Py[c1],dataLR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataLR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataLR$Va[c1-2] <- round(((dataLR$V[c1-2]-dataLR$V[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V[c1-1]-dataLR$V[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataLR$Phase[c0] == "Calibration") {
  xrot <- dataLR$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataLR$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataLR$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataLR)+1) {
  
  
  xrot <- dataLR$xrot[c1]/180*pi# + xrot;
  yrot <- dataLR$yrot[c1]/180*pi# + yrot;
  zrot <- dataLR$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataLR$pitch2[c1] = round(pitch,7)
  dataLR$yaw2[c1] = round(yaw,7)
  #dataLR$angle2[c1] = round(angle,7)
  
  dataLR$P2x[c1] = round(Pnt[1],7)
  dataLR$P2y[c1] = round(Pnt[2],7)
  dataLR$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataLR$P2x[c1-2],dataLR$P2y[c1-2],dataLR$P2z[c1-2]);
  P_current <- c(dataLR$P2x[c1-1],dataLR$P2y[c1-1],dataLR$P2z[c1-1]);
  P_post <- c(dataLR$P2x[c1],dataLR$P2y[c1],dataLR$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataLR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataLR$V2a[c1-2] <- round(((dataLR$V2[c1-2]-dataLR$V2[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V2[c1-1]-dataLR$V2[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END LR
  
  #Start VR
  
  #This seems to somewhat work


#Calibration VR

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataVR$Phase[c0] == "Calibration") {
  calw <- dataVR$wquat[c0]# + calw;
  calx <- dataVR$xquat[c0]# + calx;
  caly <- dataVR$yquat[c0]# + caly;
  calz <- dataVR$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataVR)+1) {


  # q0 <- dataVR$wquat[c1];
  # q1 <- dataVR$xquat[c1];
  # q2 <- dataVR$yquat[c1];
  # q3 <- dataVR$zquat[c1];

q0 <- dataVR$wquat[c1];
q1 <- -dataVR$xquat[c1];
q2 <- -dataVR$zquat[c1];
q3 <- -dataVR$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataVR$pitch[c1] = round(pitch,7)
  dataVR$yaw[c1] = round(yaw,7)
  #dataVR$angle[c1] = round(angle,7)
  
  dataVR$Px[c1] = round(Pnt[1],7)
  dataVR$Py[c1] = round(Pnt[2],7)
  dataVR$Pz[c1] = round(Pnt[3],7)
  
  #dataVR$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataVR$Px[c1-2],dataVR$Py[c1-2],dataVR$Pz[c1-2]);
  P_current <- c(dataVR$Px[c1-1],dataVR$Py[c1-1],dataVR$Pz[c1-1]);
  P_post <- c(dataVR$Px[c1],dataVR$Py[c1],dataVR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataVR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataVR$Va[c1-2] <- round(((dataVR$V[c1-2]-dataVR$V[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V[c1-1]-dataVR$V[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataVR$Phase[c0] == "Calibration") {
  xrot <- dataVR$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataVR$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataVR$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataVR)+1) {
  
  
  xrot <- dataVR$xrot[c1]/180*pi# + xrot;
  yrot <- dataVR$yrot[c1]/180*pi# + yrot;
  zrot <- dataVR$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataVR$pitch2[c1] = round(pitch,7)
  dataVR$yaw2[c1] = round(yaw,7)
  #dataVR$angle2[c1] = round(angle,7)
  
  dataVR$P2x[c1] = round(Pnt[1],7)
  dataVR$P2y[c1] = round(Pnt[2],7)
  dataVR$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataVR$P2x[c1-2],dataVR$P2y[c1-2],dataVR$P2z[c1-2]);
  P_current <- c(dataVR$P2x[c1-1],dataVR$P2y[c1-1],dataVR$P2z[c1-1]);
  P_post <- c(dataVR$P2x[c1],dataVR$P2y[c1],dataVR$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataVR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataVR$V2a[c1-2] <- round(((dataVR$V2[c1-2]-dataVR$V2[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V2[c1-1]-dataVR$V2[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END VR
  
setwd("/cloud/project/Recordings/Clean");
write.csv(dataRB, nameRB1[i], row.names=TRUE);
write.csv(dataLR, nameLR1[i], row.names=TRUE);
write.csv(dataVR, nameVR1[i], row.names=TRUE);

setwd("/cloud/project/Recordings/Sorting");

assign(nameRB1[i], dataRB);
assign(nameLR1[i], dataLR);
assign(nameVR1[i], dataVR);

print(i);
i <- i + 1;

}
  
rm(dataRB,dataLR,dataVR,nameRB1,nameLR1,nameVR1)
setwd("/cloud/project/Recordings");

```

```{r}

i <- 10;
setwd("/cloud/project/Recordings/Sorting");

nameRB2 <- expand.grid('US',1:31,'RB.csv');
nameRB2 <- apply(nameRB2,1,paste0,collapse = "");
nameLR2 <- expand.grid('US',1:31,'LR.csv');
nameLR2 <- apply(nameLR2,1,paste0,collapse = "");
nameVR2 <- expand.grid('US',1:31,'VR.csv');
nameVR2 <- apply(nameVR2,1,paste0,collapse = "");


while (i < 26) {

  setwd("/cloud/project/Recordings/Sorting");
  
dataRB <- read.csv(file = nameRB2[i]);
dataLR <- read.csv(file = nameLR2[i]);
dataVR <- read.csv(file = nameVR2[i]);

dataRB <- dataRB %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataLR <- dataLR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataVR <- dataVR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement,FocusedObject,RayOrigin_x,RayOrigin_y,RayOrigin_z,RayDirection_x,RayDirection_y,RayDirection_z)

dataRB[dataRB == ""] <- NA;
dataLR[dataLR == ""] <- NA;
dataVR[dataVR == ""] <- NA;

dataRB <- dataRB %>%
  drop_na(Phase)
dataLR <- dataLR %>%
  drop_na(Phase)
dataVR <- dataVR %>%
  drop_na(Phase)

# dataRB[,'Rxx'] <- NA
# dataRB[,'Rxy'] <- NA
# dataRB[,'Rxz'] <- NA
# dataRB[,'Ryx'] <- NA
# dataRB[,'Ryy'] <- NA
# dataRB[,'Ryz'] <- NA
# dataRB[,'Rzx'] <- NA
# dataRB[,'Rzy'] <- NA
# dataRB[,'Rzz'] <- NA
dataRB[,'Px'] <- NA
dataRB[,'Py'] <- NA
dataRB[,'Pz'] <- NA
# dataRB[,'Ptx'] <- NA
# dataRB[,'Pty'] <- NA
# dataRB[,'Ptz'] <- NA
# 
# dataLR[,'Rxx'] <- NA
# dataLR[,'Rxy'] <- NA
# dataLR[,'Rxz'] <- NA
# dataLR[,'Ryx'] <- NA
# dataLR[,'Ryy'] <- NA
# dataLR[,'Ryz'] <- NA
# dataLR[,'Rzx'] <- NA
# dataLR[,'Rzy'] <- NA
# dataLR[,'Rzz'] <- NA
dataLR[,'Px'] <- NA
dataLR[,'Py'] <- NA
dataLR[,'Pz'] <- NA
# dataLR[,'Ptx'] <- NA
# dataLR[,'Pty'] <- NA
# dataLR[,'Ptz'] <- NA
# 
# dataVR[,'Rxx'] <- NA
# dataVR[,'Rxy'] <- NA
# dataVR[,'Rxz'] <- NA
# dataVR[,'Ryx'] <- NA
# dataVR[,'Ryy'] <- NA
# dataVR[,'Ryz'] <- NA
# dataVR[,'Rzx'] <- NA
# dataVR[,'Rzy'] <- NA
# dataVR[,'Rzz'] <- NA
dataVR[,'Px'] <- NA
dataVR[,'Py'] <- NA
dataVR[,'Pz'] <- NA
# dataVR[,'Ptx'] <- NA
# dataVR[,'Pty'] <- NA
# dataVR[,'Ptz'] <- NA

# dataRB[,'Cx'] <- NA
# dataRB[,'Cy'] <- NA
# dataRB[,'Cz'] <- NA
# dataRB[,'Ctx'] <- NA
# dataRB[,'Cty'] <- NA
# dataRB[,'Ctz'] <- NA
# 
# dataLR[,'Cx'] <- NA
# dataLR[,'Cy'] <- NA
# dataLR[,'Cz'] <- NA
# dataLR[,'Ctx'] <- NA
# dataLR[,'Cty'] <- NA
# dataLR[,'Ctz'] <- NA
# 
# dataVR[,'Cx'] <- NA
# dataVR[,'Cy'] <- NA
# dataVR[,'Cz'] <- NA
# dataVR[,'Ctx'] <- NA
# dataVR[,'Cty'] <- NA
# dataVR[,'Ctz'] <- NA

dataRB[,'pitch'] <- NA
dataRB[,'yaw'] <- NA

dataLR[,'pitch'] <- NA
dataLR[,'yaw'] <- NA

dataVR[,'pitch'] <- NA
dataVR[,'yaw'] <- NA

dataRB[,'V'] <- NA

dataLR[,'V'] <- NA

dataVR[,'V'] <- NA

dataRB[,'Va'] <- NA

dataLR[,'Va'] <- NA

dataVR[,'Va'] <- NA

dataRB[,'P2x'] <- NA
dataRB[,'P2y'] <- NA
dataRB[,'P2z'] <- NA
dataLR[,'P2x'] <- NA
dataLR[,'P2y'] <- NA
dataLR[,'P2z'] <- NA
dataVR[,'P2x'] <- NA
dataVR[,'P2y'] <- NA
dataVR[,'P2z'] <- NA

dataRB[,'pitch2'] <- NA
dataRB[,'yaw2'] <- NA

dataLR[,'pitch2'] <- NA
dataLR[,'yaw2'] <- NA

dataVR[,'pitch2'] <- NA
dataVR[,'yaw2'] <- NA


# dataRB[,'angle'] <- NA
# dataLR[,'angle'] <- NA
# dataVR[,'angle'] <- NA
# 
# dataRB[,'angle2'] <- NA
# dataLR[,'angle2'] <- NA
# dataVR[,'angle2'] <- NA

dataRB[,'V2'] <- NA

dataLR[,'V2'] <- NA

dataVR[,'V2'] <- NA

dataRB[,'V2a'] <- NA

dataLR[,'V2a'] <- NA

dataVR[,'V2a'] <- NA


#Start RB

#This seems to somewhat work


#Calibration RB

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataRB$Phase[c0] == "Calibration") {
  calw <- dataRB$wquat[c0]# + calw;
  calx <- dataRB$xquat[c0]# + calx;
  caly <- dataRB$yquat[c0]# + caly;
  calz <- dataRB$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataRB)+1) {


  # q0 <- dataRB$wquat[c1];
  # q1 <- dataRB$xquat[c1];
  # q2 <- dataRB$yquat[c1];
  # q3 <- dataRB$zquat[c1];

q0 <- dataRB$wquat[c1];
q1 <- -dataRB$xquat[c1];
q2 <- -dataRB$zquat[c1];
q3 <- -dataRB$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataRB$pitch[c1] = round(pitch,7)
  dataRB$yaw[c1] = round(yaw,7)
  #dataRB$angle[c1] = round(angle,7)
  
  dataRB$Px[c1] = round(Pnt[1],7)
  dataRB$Py[c1] = round(Pnt[2],7)
  dataRB$Pz[c1] = round(Pnt[3],7)
  
  #dataRB$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataRB$Px[c1-2],dataRB$Py[c1-2],dataRB$Pz[c1-2]);
  P_current <- c(dataRB$Px[c1-1],dataRB$Py[c1-1],dataRB$Pz[c1-1]);
  P_post <- c(dataRB$Px[c1],dataRB$Py[c1],dataRB$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataRB$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataRB$Va[c1-2] <- round(((dataRB$V[c1-2]-dataRB$V[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V[c1-1]-dataRB$V[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataRB$Phase[c0] == "Calibration") {
  xrot <- dataRB$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataRB$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataRB$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataRB)+1) {
  
  
  xrot <- dataRB$xrot[c1]/180*pi# + xrot;
  yrot <- dataRB$yrot[c1]/180*pi# + yrot;
  zrot <- dataRB$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataRB$pitch2[c1] = round(pitch,7)
  dataRB$yaw2[c1] = round(yaw,7)
  #dataRB$angle2[c1] = round(angle,7)
  
  dataRB$P2x[c1] = round(Pnt[1],7)
  dataRB$P2y[c1] = round(Pnt[2],7)
  dataRB$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataRB$P2x[c1-2],dataRB$P2y[c1-2],dataRB$P2z[c1-2]);
  P_current <- c(dataRB$P2x[c1-1],dataRB$P2y[c1-1],dataRB$P2z[c1-1]);
  P_post <- c(dataRB$P2x[c1],dataRB$P2y[c1],dataRB$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataRB$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataRB$V2a[c1-2] <- round(((dataRB$V2[c1-2]-dataRB$V2[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V2[c1-1]-dataRB$V2[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataRB <- dataRB[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END RB
  
  #Start LR
 
#This seems to somewhat work


#Calibration LR

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataLR$Phase[c0] == "Calibration") {
  calw <- dataLR$wquat[c0]# + calw;
  calx <- dataLR$xquat[c0]# + calx;
  caly <- dataLR$yquat[c0]# + caly;
  calz <- dataLR$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataLR)+1) {


  # q0 <- dataLR$wquat[c1];
  # q1 <- dataLR$xquat[c1];
  # q2 <- dataLR$yquat[c1];
  # q3 <- dataLR$zquat[c1];

q0 <- dataLR$wquat[c1];
q1 <- -dataLR$xquat[c1];
q2 <- -dataLR$zquat[c1];
q3 <- -dataLR$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataLR$pitch[c1] = round(pitch,7)
  dataLR$yaw[c1] = round(yaw,7)
  #dataLR$angle[c1] = round(angle,7)
  
  dataLR$Px[c1] = round(Pnt[1],7)
  dataLR$Py[c1] = round(Pnt[2],7)
  dataLR$Pz[c1] = round(Pnt[3],7)
  
  #dataLR$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataLR$Px[c1-2],dataLR$Py[c1-2],dataLR$Pz[c1-2]);
  P_current <- c(dataLR$Px[c1-1],dataLR$Py[c1-1],dataLR$Pz[c1-1]);
  P_post <- c(dataLR$Px[c1],dataLR$Py[c1],dataLR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataLR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataLR$Va[c1-2] <- round(((dataLR$V[c1-2]-dataLR$V[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V[c1-1]-dataLR$V[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataLR$Phase[c0] == "Calibration") {
  xrot <- dataLR$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataLR$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataLR$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataLR)+1) {
  
  
  xrot <- dataLR$xrot[c1]/180*pi# + xrot;
  yrot <- dataLR$yrot[c1]/180*pi# + yrot;
  zrot <- dataLR$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataLR$pitch2[c1] = round(pitch,7)
  dataLR$yaw2[c1] = round(yaw,7)
  #dataLR$angle2[c1] = round(angle,7)
  
  dataLR$P2x[c1] = round(Pnt[1],7)
  dataLR$P2y[c1] = round(Pnt[2],7)
  dataLR$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataLR$P2x[c1-2],dataLR$P2y[c1-2],dataLR$P2z[c1-2]);
  P_current <- c(dataLR$P2x[c1-1],dataLR$P2y[c1-1],dataLR$P2z[c1-1]);
  P_post <- c(dataLR$P2x[c1],dataLR$P2y[c1],dataLR$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataLR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataLR$V2a[c1-2] <- round(((dataLR$V2[c1-2]-dataLR$V2[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V2[c1-1]-dataLR$V2[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataLR <- dataLR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END LR
  
  #Start VR
  
  #This seems to somewhat work


#Calibration VR

c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

C <- c(c(0,0,0),c(0,0,0),c(0,0,0));

while (dataVR$Phase[c0] == "Calibration") {
  calw <- dataVR$wquat[c0]# + calw;
  calx <- dataVR$xquat[c0]# + calx;
  caly <- dataVR$yquat[c0]# + caly;
  calz <- dataVR$zquat[c0]# + calz;
  c0 <- c0+1;

# q0 <- calw#/(c0-1);
# q1 <- calx#/(c0-1);
# q2 <- caly#/(c0-1);
# q3 <- calz#/(c0-1);

q0 <- calw#/(c0-1);
q1 <- -calx#/(c0-1);
q2 <- -calz#/(c0-1);
q3 <- -caly#/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- C + c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
}
C <- C/(c0-1);
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(calquatinv[1,1]*N[1]+calquatinv[1,2]*N[2]+calquatinv[1,3]*N[3],calquatinv[2,1]*N[1]+calquatinv[2,2]*N[2]+calquatinv[2,3]*N[3],calquatinv[3,1]*N[1]+calquatinv[3,2]*N[2]+calquatinv[3,3]*N[3]);

  
basismatrix1 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);

basismatrix1 <- t(basismatrix1)

c1 <- 1

while (c1 < nrow(dataVR)+1) {


  # q0 <- dataVR$wquat[c1];
  # q1 <- dataVR$xquat[c1];
  # q2 <- dataVR$yquat[c1];
  # q3 <- dataVR$zquat[c1];

q0 <- dataVR$wquat[c1];
q1 <- -dataVR$xquat[c1];
q2 <- -dataVR$zquat[c1];
q3 <- -dataVR$yquat[c1];


  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_Matrix = matrix(C,nrow=3,ncol=3);

  Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- -(acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  if(Pnt[1] < N[1]){
    yaw <- -yaw
  }
  
  dataVR$pitch[c1] = round(pitch,7)
  dataVR$yaw[c1] = round(yaw,7)
  #dataVR$angle[c1] = round(angle,7)
  
  dataVR$Px[c1] = round(Pnt[1],7)
  dataVR$Py[c1] = round(Pnt[2],7)
  dataVR$Pz[c1] = round(Pnt[3],7)
  
  #dataVR$pitch2[c1] = round(pitch2,7)
  
  
  if(c1 > 2){

  P_pre <- c(dataVR$Px[c1-2],dataVR$Py[c1-2],dataVR$Pz[c1-2]);
  P_current <- c(dataVR$Px[c1-1],dataVR$Py[c1-1],dataVR$Pz[c1-1]);
  P_post <- c(dataVR$Px[c1],dataVR$Py[c1],dataVR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataVR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V[c1-1] <- round(V,7);

  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataVR$Va[c1-2] <- round(((dataVR$V[c1-2]-dataVR$V[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V[c1-1]-dataVR$V[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;

}



  #this does work as well
  
  xrot <- 0
  yrot <- 0
  zrot <- 0
  
  R <- matrix(0,nrow=3,ncol=3)
  
  c0 <- 1

while (dataVR$Phase[c0] == "Calibration") {
  xrot <- dataVR$xrot[c0]/180*pi-pi + xrot;
  yrot <- dataVR$yrot[c0]/180*pi-pi + yrot;
  zrot <- dataVR$zrot[c0]/180*pi-pi + zrot;
  c0 <- c0+1;
}
  a <- xrot/(c0-1)
  b <- yrot/(c0-1)
  c <- zrot/(c0-1)

  
  # a <- 0
  # b <- 0
  # c <- 0
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz# + R;
  
#}
  
  #R <- R/(c0-1)
  
  Rinv <- inv(R)

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(R[1,1]*X_n[1]+R[1,2]*X_n[2]+R[1,3]*X_n[3],R[2,1]*X_n[1]+R[2,2]*X_n[2]+R[2,3]*X_n[3],R[3,1]*X_n[1]+R[3,2]*X_n[2]+R[3,3]*X_n[3]);
  Py <- c(R[1,1]*Y_n[1]+R[1,2]*Y_n[2]+R[1,3]*Y_n[3],R[2,1]*Y_n[1]+R[2,2]*Y_n[2]+R[2,3]*Y_n[3],R[3,1]*Y_n[1]+R[3,2]*Y_n[2]+R[3,3]*Y_n[3]);
  Pz <- c(R[1,1]*Z_n[1]+R[1,2]*Z_n[2]+R[1,3]*Z_n[3],R[2,1]*Z_n[1]+R[2,2]*Z_n[2]+R[2,3]*Z_n[3],R[3,1]*Z_n[1]+R[3,2]*Z_n[2]+R[3,3]*Z_n[3]);


 N <- c((Y_n[2]*Px[3]) - (Y_n[3]*Px[2]), (Y_n[3]*Px[1]) - (Y_n[1]*Px[3]), (Y_n[1]*Px[2]) - (Y_n[2]*Px[1]))
 #N <- c(0,0,1)

  Pn <- c(Rinv[1,1]*N[1]+Rinv[1,2]*N[2]+Rinv[1,3]*N[3],Rinv[2,1]*N[1]+Rinv[2,2]*N[2]+Rinv[2,3]*N[3],Rinv[3,1]*N[1]+Rinv[3,2]*N[2]+Rinv[3,3]*N[3]);
  
  basismatrix2 <- matrix(c(c((Y_n[2]*N[3]) - (Y_n[3]*N[2]), (Y_n[3]*N[1]) - (Y_n[1]*N[3]), (Y_n[1]*N[2]) - (Y_n[2]*N[1])),c(0,1,0),c(N[1],N[2],N[3])),nrow=3,ncol=3);
  
  basismatrix2 <- t(basismatrix2)
  
c1 <- 1

while (c1 < nrow(dataVR)+1) {
  
  
  xrot <- dataVR$xrot[c1]/180*pi# + xrot;
  yrot <- dataVR$yrot[c1]/180*pi# + yrot;
  zrot <- dataVR$zrot[c1]/180*pi# + zrot;

  a <- xrot-pi#/(c0-1)
  b <- yrot-pi#/(c0-1)
  c <- zrot-pi#/(c0-1)
  
  
  Rx <- matrix(c(c(1,0,0),c(0,cos(a),-sin(a)),c(0,sin(a),cos(a))),nrow=3,ncol=3)
    
  Ry <- matrix(c(c(cos(b),0,sin(b)),c(0,1,0),c(-sin(b),0,cos(b))),nrow=3,ncol=3)
    
  Rz <- matrix(c(c(cos(c),-sin(c),0),c(sin(c),cos(c),0),c(0,0,1)),nrow=3,ncol=3)
  
  R <- Ry%*%Rx%*%Rz;
  
  #R <- matrix(c(c()))
  
  #EA <- c(a,b,c)
  
  #R2 <- EA2DCM(EA,"yxz")
 
  rot_Matrix = R;

Pnt <- c(rot_Matrix[1,1]*Pn[1]+rot_Matrix[1,2]*Pn[2]+rot_Matrix[1,3]*Pn[3],rot_Matrix[2,1]*Pn[1]+rot_Matrix[2,2]*Pn[2]+rot_Matrix[2,3]*Pn[3],rot_Matrix[3,1]*Pn[1]+rot_Matrix[3,2]*Pn[2]+rot_Matrix[3,3]*Pn[3]);
  
  yaw <- (acos((Pnt[1]*N[1]+0+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]+N[3]*N[3]))))/pi*180;
  pitch <- (acos((Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(Pnt[1]*Pnt[1]+Pnt[3]*Pnt[3]))))/pi*180;
  #pitch2 <- (atan(Pnt[2]/sqrt(Pnt[1]^2+Pnt[3]^2)))/pi*180;
  
  #angle <- (acos((Pnt[1]*N[1]+Pnt[2]*N[2]+Pnt[3]*N[3])/(sqrt(Pnt[1]*Pnt[1]+Pnt[2]*Pnt[2]+Pnt[3]*Pnt[3])*sqrt(N[1]*N[1]*N[2]*N[2]+N[3]*N[3]))))/pi*180;
  
  if(Pnt[2] < 0){
    pitch <- -pitch
  }
  
  if(Pnt[1] < 0){
    yaw <- -yaw
  }
  
  dataVR$pitch2[c1] = round(pitch,7)
  dataVR$yaw2[c1] = round(yaw,7)
  #dataVR$angle2[c1] = round(angle,7)
  
  dataVR$P2x[c1] = round(Pnt[1],7)
  dataVR$P2y[c1] = round(Pnt[2],7)
  dataVR$P2z[c1] = round(Pnt[3],7)
  
  
  if(c1 > 2){

  P_pre <- c(dataVR$P2x[c1-2],dataVR$P2y[c1-2],dataVR$P2z[c1-2]);
  P_current <- c(dataVR$P2x[c1-1],dataVR$P2y[c1-1],dataVR$P2z[c1-1]);
  P_post <- c(dataVR$P2x[c1],dataVR$P2y[c1],dataVR$P2z[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #dataVR$angle[c1-1] <- preangle;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V2[c1-1] <- round(V,7);

  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);

  if(c1 > 3){
    dataVR$V2a[c1-2] <- round(((dataVR$V2[c1-2]-dataVR$V2[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V2[c1-1]-dataVR$V2[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2,7);
  }

  # if(is.nan(preangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  # 
  # if(is.nan(postangle)){
  #   c1 <- c1-1;
  #   dataVR <- dataVR[-c(c1), ]
  # }
  }
  
  
c1 <- c1 + 1;
   
}

  rm(c0,c1,yaw,pitch,Pnt,Pn,N,R,Rz,Ry,Rx,rot_Matrix,a,b,c,X_n,Y_n,Z_n,xrot,yrot,zrot,Px,Py,Pz,q0,q1,q2,q3,basismatrix1,basismatrix2,Rinv,calquat,calquatinv,C,r00,r01,r02,r10,r11,r12,r20,r21,r22,calw,calx,caly,calz,p_current,p_post,p_pre,postangle,preangle,T_current,T_pre,T_post,V)
  
  #END VR

setwd("/cloud/project/Recordings/Clean");
write.csv(dataRB, nameRB2[i], row.names=TRUE);
write.csv(dataLR, nameLR2[i], row.names=TRUE);
write.csv(dataVR, nameVR2[i], row.names=TRUE);

setwd("/cloud/project/Recordings/Sorting");

assign(nameRB2[i], dataRB);
assign(nameLR2[i], dataLR);
assign(nameVR2[i], dataVR);

print(i);
i <- i + 1;

}
  
rm(dataRB,dataLR,dataVR,nameRB2,nameLR2,nameVR2,i)
setwd("/cloud/project/Recordings");

```




```{r}
#data export

# i <- 1
# 
# setwd("/cloud/project/Recordings/Clean");
# 
# nameRB1 <- expand.grid('US',1:9,'RB.csv');
# nameRB1 <- apply(nameRB1,1,paste0,collapse = "");
# nameLR1 <- expand.grid('US',1:9,'LR.csv');
# nameLR1 <- apply(nameLR1,1,paste0,collapse = "");
# nameVR1 <- expand.grid('US',1:9,'VR.csv');
# nameVR1 <- apply(nameVR1,1,paste0,collapse = "");
# nameRB2 <- expand.grid('US',1:31,'RB.csv');
# nameRB2 <- apply(nameRB2,1,paste0,collapse = "");
# nameLR2 <- expand.grid('US',1:31,'LR.csv');
# nameLR2 <- apply(nameLR2,1,paste0,collapse = "");
# nameVR2 <- expand.grid('US',1:31,'VR.csv');
# nameVR2 <- apply(nameVR2,1,paste0,collapse = "");
# 
# while (i < 10) {
#   write.csv(nameRB1[i], nameRB1[i], row.names=TRUE);
#   write.csv(nameLR1[i], nameLR1[i], row.names=TRUE);
#   write.csv(nameVR1[i], nameVR1[i], row.names=TRUE);
#   i <- i+1;
# }
# 
# while (i < 26) {
#   write.csv(nameRB2[i], nameRB2[i], row.names=TRUE);
#   write.csv(nameLR2[i], nameLR2[i], row.names=TRUE);
#   write.csv(nameVR2[i], nameVR2[i], row.names=TRUE);
#   i <- i+1;
# }
# 
# rm(nameRB1,nameRB2,nameLR1,nameLR2,nameVR1,nameVR2,i);

```