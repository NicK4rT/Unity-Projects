

```{r}

library(readr)
library(dplyr)
library(ggplot2)
library(matlib)
library(tidyr)

```


```{r}
#CSV import
#temp = list.files(pattern="*.csv")
#myfiles = lapply(temp, read.delim)

i <- 1;
setwd("/cloud/project/Recordings/Sorting");

nameRB1 <- expand.grid('US',1:9,'RB.csv');
nameRB1 <- apply(nameRB1,1,paste0,collapse = "");
nameLR1 <- expand.grid('US',1:9,'LR.csv');
nameLR1 <- apply(nameLR1,1,paste0,collapse = "");
nameVR1 <- expand.grid('US',1:9,'VR.csv');
nameVR1 <- apply(nameVR1,1,paste0,collapse = "");


while (i < 10) {

  setwd("/cloud/project/Recordings/Sorting");
  
dataRB <- read.csv(file = nameRB1[i]);
dataLR <- read.csv(file = nameLR1[i]);
dataVR <- read.csv(file = nameVR1[i]);

dataRB <- dataRB %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataLR <- dataLR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataVR <- dataVR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement,FocusedObject,RayOrigin_x,RayOrigin_y,RayOrigin_z,RayDirection_x,RayDirection_y,RayDirection_z)

dataRB[dataRB == ""] <- NA;
dataLR[dataLR == ""] <- NA;
dataVR[dataVR == ""] <- NA;

dataRB <- dataRB %>%
  drop_na(Phase)
dataLR <- dataLR %>%
  drop_na(Phase)
dataVR <- dataVR %>%
  drop_na(Phase)

# dataRB[,'Rxx'] <- NA
# dataRB[,'Rxy'] <- NA
# dataRB[,'Rxz'] <- NA
# dataRB[,'Ryx'] <- NA
# dataRB[,'Ryy'] <- NA
# dataRB[,'Ryz'] <- NA
# dataRB[,'Rzx'] <- NA
# dataRB[,'Rzy'] <- NA
# dataRB[,'Rzz'] <- NA
dataRB[,'Px'] <- NA
dataRB[,'Py'] <- NA
dataRB[,'Pz'] <- NA
dataRB[,'Ptx'] <- NA
dataRB[,'Pty'] <- NA
dataRB[,'Ptz'] <- NA

# dataLR[,'Rxx'] <- NA
# dataLR[,'Rxy'] <- NA
# dataLR[,'Rxz'] <- NA
# dataLR[,'Ryx'] <- NA
# dataLR[,'Ryy'] <- NA
# dataLR[,'Ryz'] <- NA
# dataLR[,'Rzx'] <- NA
# dataLR[,'Rzy'] <- NA
# dataLR[,'Rzz'] <- NA
dataLR[,'Px'] <- NA
dataLR[,'Py'] <- NA
dataLR[,'Pz'] <- NA
dataLR[,'Ptx'] <- NA
dataLR[,'Pty'] <- NA
dataLR[,'Ptz'] <- NA

# dataVR[,'Rxx'] <- NA
# dataVR[,'Rxy'] <- NA
# dataVR[,'Rxz'] <- NA
# dataVR[,'Ryx'] <- NA
# dataVR[,'Ryy'] <- NA
# dataVR[,'Ryz'] <- NA
# dataVR[,'Rzx'] <- NA
# dataVR[,'Rzy'] <- NA
# dataVR[,'Rzz'] <- NA
dataVR[,'Px'] <- NA
dataVR[,'Py'] <- NA
dataVR[,'Pz'] <- NA
dataVR[,'Ptx'] <- NA
dataVR[,'Pty'] <- NA
dataVR[,'Ptz'] <- NA

dataRB[,'pitch'] <- NA
dataRB[,'roll'] <- NA

dataLR[,'pitch'] <- NA
dataLR[,'roll'] <- NA

dataVR[,'pitch'] <- NA
dataVR[,'roll'] <- NA

dataRB[,'V'] <- NA

dataLR[,'V'] <- NA

dataVR[,'V'] <- NA

dataRB[,'V2'] <- NA

dataLR[,'V2'] <- NA

dataVR[,'V2'] <- NA


#dataRB[,'preangle'] <- NA;
#dataRB[,'postangle'] <- NA;
#dataRB[,'timestep_pre'] <- NA;
#dataRB[,'timestep_post'] <- NA;
  

#Calibration RB
#print("ARB")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataRB$Phase[c0] == "Calibration") {
  calw <- dataRB$wquat[c0] + calw;
  calx <- dataRB$xquat[c0] + calx;
  caly <- dataRB$yquat[c0] + caly;
  calz <- dataRB$zquat[c0] + calz;
  c0 <- c0+1;
}

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);

  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);
  #P_c <- c(calquatinv[1,1]*0+calquatinv[1,2]*0+calquatinv[1,3]*1,calquatinv[2,1]*0+calquatinv[2,2]*0+calquatinv[2,3]*1,calquatinv[3,1]*0+calquatinv[3,2]*0+calquatinv[3,3]*1)

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors RB
#print("BRB")
c1 <- 1;
while(!is.na(dataRB$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataRB$wquat[c1];
  q1 <- dataRB$xquat[c1];
  q2 <- dataRB$yquat[c1];
  q3 <- dataRB$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);
  
  dataRB$Px[c1] <- P_i[1];
  dataRB$Py[c1] <- P_i[2];
  dataRB$Pz[c1] <- P_i[3];
  
  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);
  
  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);
  
  dataRB$Ptx[c1] <- P_it[1];
  dataRB$Pty[c1] <- P_it[2];
  dataRB$Ptz[c1] <- P_it[3];
  
  dataRB$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataRB$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));
  
  if(P_it[3] < 0){
    dataRB$roll[c1] <- 180-dataRB$roll[c1];
  }
  if(P_it[2] < 0){
    dataRB$pitch[c1] <- -dataRB$pitch[c1];
  }
  if(P_it[1] < 0){
    dataRB$roll[c1] <- -dataRB$roll[c1];
  }

  dataRB$pitch[c1] <- round(dataRB$pitch[c1]/pi*180,3);
  dataRB$roll[c1] <- round(dataRB$roll[c1]/pi*180,3);
  
  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  # 
  # dataRB$Rxx[c1] <- Px[1];
  # dataRB$Rxy[c1] <- Px[2];
  # dataRB$Rxz[c1] <- Px[3];
  # dataRB$Ryx[c1] <- Py[1];
  # dataRB$Ryy[c1] <- Py[2];
  # dataRB$Ryz[c1] <- Py[3];
  # dataRB$Rzx[c1] <- Pz[1];
  # dataRB$Rzy[c1] <- Pz[2];
  # dataRB$Rzz[c1] <- Pz[3];
  #print("CRB")
  if(c1 > 2){
    
  P_pre <- c(dataRB$Px[c1-2],dataRB$Py[c1-2],dataRB$Pz[c1-2]);
  P_current <- c(dataRB$Px[c1-1],dataRB$Py[c1-1],dataRB$Pz[c1-1]);
  P_post <- c(dataRB$Px[c1],dataRB$Py[c1],dataRB$Pz[c1]);
  
  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);
  
  #print(T_pre);
  #print(T_current);
  #print(T_post);

  
  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))
  
  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;
  
  #print("angles");
  #print(preangle);
  #print(postangle);
  
  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);
  
  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V[c1-1] <- V;
  
  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataRB$V2[c1-2] <- ((dataRB$V2[c1-2]-dataRB$V2[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V2[c1-1]-dataRB$V2[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2;
  }

  if(is.nan(preangle)){
    c1 <- c1-1;
    dataRB <- dataRB[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataRB <- dataRB[-c(c1), ]
  
  }
  }
  
  c1 <- c1+1;
  
}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DRB")


#Calibration LR
#print("LR1")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataLR$Phase[c0] == "Calibration" || dataLR$Phase[c0] == "Calibrations") {
  calw <- dataLR$wquat[c0] + calw;
  calx <- dataLR$xquat[c0] + calx;
  caly <- dataLR$yquat[c0] + caly;
  calz <- dataLR$zquat[c0] + calz;
  c0 <- c0+1;
}
#print("LR2")

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;
#print("LR3")

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);
#print("LR3.5")
  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);
#print("LR4")

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);


  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors LR
#print("BLR")
c1 <- 1;
while (!is.na(dataLR$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataLR$wquat[c1];
  q1 <- dataLR$xquat[c1];
  q2 <- dataLR$yquat[c1];
  q3 <- dataLR$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);
  
  dataLR$Px[c1] <- P_i[1];
  dataLR$Py[c1] <- P_i[2];
  dataLR$Pz[c1] <- P_i[3];
  
  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);
  
  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);
  
  dataLR$Ptx[c1] <- P_it[1];
  dataLR$Pty[c1] <- P_it[2];
  dataLR$Ptz[c1] <- P_it[3];
  
  dataLR$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataLR$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));
  
  if(P_it[3] < 0){
    dataLR$roll[c1] <- 180-dataLR$roll[c1];
  }
  if(P_it[2] < 0){
    dataLR$pitch[c1] <- -dataLR$pitch[c1];
  }
  if(P_it[1] < 0){
    dataLR$roll[c1] <- -dataLR$roll[c1];
  }

  dataLR$pitch[c1] <- round(dataLR$pitch[c1]/pi*180,3);
  dataLR$roll[c1] <- round(dataLR$roll[c1]/pi*180,3);
  
  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  # 
  # dataLR$Rxx[c1] <- Px[1];
  # dataLR$Rxy[c1] <- Px[2];
  # dataLR$Rxz[c1] <- Px[3];
  # dataLR$Ryx[c1] <- Py[1];
  # dataLR$Ryy[c1] <- Py[2];
  # dataLR$Ryz[c1] <- Py[3];
  # dataLR$Rzx[c1] <- Pz[1];
  # dataLR$Rzy[c1] <- Pz[2];
  # dataLR$Rzz[c1] <- Pz[3];
  #print("CLR")
  if(c1 > 2){
    
  P_pre <- c(dataLR$Px[c1-2],dataLR$Py[c1-2],dataLR$Pz[c1-2]);
  P_current <- c(dataLR$Px[c1-1],dataLR$Py[c1-1],dataLR$Pz[c1-1]);
  P_post <- c(dataLR$Px[c1],dataLR$Py[c1],dataLR$Pz[c1]);
  
  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);
  
  #print(T_pre);
  #print(T_current);
  #print(T_post);

  
  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))
  
  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;
  
  #print("angles");
  #print(preangle);
  #print(postangle);
  
  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);
  
  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V[c1-1] <- V;
  
  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataLR$V2[c1-2] <- ((dataLR$V2[c1-2]-dataLR$V2[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V2[c1-1]-dataLR$V2[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2;
  }

  if(is.nan(preangle)){
    c1 <- c1-1;
    dataLR <- dataLR[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataLR <- dataLR[-c(c1), ]
  
  }
  }
  
  c1 <- c1+1;
  
}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DLR")

#Calibration VR
#print("AVR")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataVR$Phase[c0] == "Calibration") {
  calw <- dataVR$wquat[c0] + calw;
  calx <- dataVR$xquat[c0] + calx;
  caly <- dataVR$yquat[c0] + caly;
  calz <- dataVR$zquat[c0] + calz;
  c0 <- c0+1;
}

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);


  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors VR
#print("BVR")
c1 <- 1;
while (!is.na(dataVR$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataVR$wquat[c1];
  q1 <- dataVR$xquat[c1];
  q2 <- dataVR$yquat[c1];
  q3 <- dataVR$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);
  
  dataVR$Px[c1] <- P_i[1];
  dataVR$Py[c1] <- P_i[2];
  dataVR$Pz[c1] <- P_i[3];
  
  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);
  
  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);
  
  dataVR$Ptx[c1] <- P_it[1];
  dataVR$Pty[c1] <- P_it[2];
  dataVR$Ptz[c1] <- P_it[3];
  
  dataVR$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataVR$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));
  
  if(P_it[3] < 0){
    dataVR$roll[c1] <- 180-dataVR$roll[c1];
  }
  if(P_it[2] < 0){
    dataVR$pitch[c1] <- -dataVR$pitch[c1];
  }
  if(P_it[1] < 0){
    dataVR$roll[c1] <- -dataVR$roll[c1];
  }

  dataVR$pitch[c1] <- round(dataVR$pitch[c1]/pi*180,3);
  dataVR$roll[c1] <- round(dataVR$roll[c1]/pi*180,3);
  
  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  # 
  # dataVR$Rxx[c1] <- Px[1];
  # dataVR$Rxy[c1] <- Px[2];
  # dataVR$Rxz[c1] <- Px[3];
  # dataVR$Ryx[c1] <- Py[1];
  # dataVR$Ryy[c1] <- Py[2];
  # dataVR$Ryz[c1] <- Py[3];
  # dataVR$Rzx[c1] <- Pz[1];
  # dataVR$Rzy[c1] <- Pz[2];
  # dataVR$Rzz[c1] <- Pz[3];
  #print("CVR")
  if(c1 > 2){
    
  P_pre <- c(dataVR$Px[c1-2],dataVR$Py[c1-2],dataVR$Pz[c1-2]);
  P_current <- c(dataVR$Px[c1-1],dataVR$Py[c1-1],dataVR$Pz[c1-1]);
  P_post <- c(dataVR$Px[c1],dataVR$Py[c1],dataVR$Pz[c1]);
  
  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);
  
  #print(T_pre);
  #print(T_current);
  #print(T_post);

  
  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))
  
  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;
  
  #print("angles");
  #print(preangle);
  #print(postangle);
  
  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);
  
  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V[c1-1] <- V;
  
  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataVR$V2[c1-2] <- ((dataVR$V2[c1-2]-dataVR$V2[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V2[c1-1]-dataVR$V2[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2;
  }

  if(is.nan(preangle)){
    c1 <- c1-1;
    dataVR <- dataVR[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataVR <- dataVR[-c(c1), ]
  
  }
  }
  
  c1 <- c1+1;
  
}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DVR")

assign(nameRB1[i], dataRB);
assign(nameLR1[i], dataLR);
assign(nameVR1[i], dataVR);

print(i);
i <- i + 1;

};


#i <- 10;

nameRB2 <- expand.grid('US',1:31,'RB.csv');
nameRB2 <- apply(nameRB2,1,paste0,collapse = "");
nameLR2 <- expand.grid('US',1:31,'LR.csv');
nameLR2 <- apply(nameLR2,1,paste0,collapse = "");
nameVR2 <- expand.grid('US',1:31,'VR.csv');
nameVR2 <- apply(nameVR2,1,paste0,collapse = "");


while (i < 26) {
  
  setwd("/cloud/project/Recordings/Sorting");

dataRB <- read.csv(file = nameRB2[i]);
dataLR <- read.csv(file = nameLR2[i]);
dataVR <- read.csv(file = nameVR2[i]);

dataRB <- dataRB %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataLR <- dataLR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement)
dataVR <- dataVR %>%
  select(Time,X,Y,Z,wquat,xquat,yquat,zquat,xrot,yrot,zrot,Phase,GFO,Movement,FocusedObject,RayOrigin_x,RayOrigin_y,RayOrigin_z,RayDirection_x,RayDirection_y,RayDirection_z)

dataRB[dataRB == ""] <- NA;
dataLR[dataLR == ""] <- NA;
dataVR[dataVR == ""] <- NA;

dataRB <- dataRB %>%
  drop_na(Phase)
dataLR <- dataLR %>%
  drop_na(Phase)
dataVR <- dataVR %>%
  drop_na(Phase)

dataRB[dataRB == ""] <- NA;
dataLR[dataLR == ""] <- NA;
dataVR[dataVR == ""] <- NA;

dataRB <- dataRB %>%
  drop_na(Phase)
dataLR <- dataLR %>%
  drop_na(Phase)
dataVR <- dataVR %>%
  drop_na(Phase)

# dataRB[,'Rxx'] <- NA
# dataRB[,'Rxy'] <- NA
# dataRB[,'Rxz'] <- NA
# dataRB[,'Ryx'] <- NA
# dataRB[,'Ryy'] <- NA
# dataRB[,'Ryz'] <- NA
# dataRB[,'Rzx'] <- NA
# dataRB[,'Rzy'] <- NA
# dataRB[,'Rzz'] <- NA
dataRB[,'Px'] <- NA
dataRB[,'Py'] <- NA
dataRB[,'Pz'] <- NA
dataRB[,'Ptx'] <- NA
dataRB[,'Pty'] <- NA
dataRB[,'Ptz'] <- NA

# dataLR[,'Rxx'] <- NA
# dataLR[,'Rxy'] <- NA
# dataLR[,'Rxz'] <- NA
# dataLR[,'Ryx'] <- NA
# dataLR[,'Ryy'] <- NA
# dataLR[,'Ryz'] <- NA
# dataLR[,'Rzx'] <- NA
# dataLR[,'Rzy'] <- NA
# dataLR[,'Rzz'] <- NA
dataLR[,'Px'] <- NA
dataLR[,'Py'] <- NA
dataLR[,'Pz'] <- NA
dataLR[,'Ptx'] <- NA
dataLR[,'Pty'] <- NA
dataLR[,'Ptz'] <- NA

# dataVR[,'Rxx'] <- NA
# dataVR[,'Rxy'] <- NA
# dataVR[,'Rxz'] <- NA
# dataVR[,'Ryx'] <- NA
# dataVR[,'Ryy'] <- NA
# dataVR[,'Ryz'] <- NA
# dataVR[,'Rzx'] <- NA
# dataVR[,'Rzy'] <- NA
# dataVR[,'Rzz'] <- NA
dataVR[,'Px'] <- NA
dataVR[,'Py'] <- NA
dataVR[,'Pz'] <- NA
dataVR[,'Ptx'] <- NA
dataVR[,'Pty'] <- NA
dataVR[,'Ptz'] <- NA

dataRB[,'pitch'] <- NA
dataRB[,'roll'] <- NA

dataLR[,'pitch'] <- NA
dataLR[,'roll'] <- NA

dataVR[,'pitch'] <- NA
dataVR[,'roll'] <- NA

dataRB[,'V'] <- NA

dataLR[,'V'] <- NA

dataVR[,'V'] <- NA

dataRB[,'V2'] <- NA

dataLR[,'V2'] <- NA

dataVR[,'V2'] <- NA


#dataRB[,'preangle'] <- NA;
#dataRB[,'postangle'] <- NA;
#dataRB[,'timestep_pre'] <- NA;
#dataRB[,'timestep_post'] <- NA;


#Calibration RB
#print("ARB")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataRB$Phase[c0] == "Calibration") {
  calw <- dataRB$wquat[c0] + calw;
  calx <- dataRB$xquat[c0] + calx;
  caly <- dataRB$yquat[c0] + caly;
  calz <- dataRB$zquat[c0] + calz;
  c0 <- c0+1;
}

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);

  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors RB
#print("BRB")
c1 <- 1;
while (!is.na(dataRB$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataRB$wquat[c1];
  q1 <- dataRB$xquat[c1];
  q2 <- dataRB$yquat[c1];
  q3 <- dataRB$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);

  dataRB$Px[c1] <- P_i[1];
  dataRB$Py[c1] <- P_i[2];
  dataRB$Pz[c1] <- P_i[3];

  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);

  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);

  dataRB$Ptx[c1] <- P_it[1];
  dataRB$Pty[c1] <- P_it[2];
  dataRB$Ptz[c1] <- P_it[3];

  dataRB$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataRB$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));

  if(P_it[3] < 0){
    dataRB$roll[c1] <- 180-dataRB$roll[c1];
  }
  if(P_it[2] < 0){
    dataRB$pitch[c1] <- -dataRB$pitch[c1];
  }
  if(P_it[1] < 0){
    dataRB$roll[c1] <- -dataRB$roll[c1];
  }

  dataRB$pitch[c1] <- round(dataRB$pitch[c1]/pi*180,3);
  dataRB$roll[c1] <- round(dataRB$roll[c1]/pi*180,3);

  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  #
  # dataRB$Rxx[c1] <- Px[1];
  # dataRB$Rxy[c1] <- Px[2];
  # dataRB$Rxz[c1] <- Px[3];
  # dataRB$Ryx[c1] <- Py[1];
  # dataRB$Ryy[c1] <- Py[2];
  # dataRB$Ryz[c1] <- Py[3];
  # dataRB$Rzx[c1] <- Pz[1];
  # dataRB$Rzy[c1] <- Pz[2];
  # dataRB$Rzz[c1] <- Pz[3];
  #print("CRB")
  if(c1 > 2){

  P_pre <- c(dataRB$Px[c1-2],dataRB$Py[c1-2],dataRB$Pz[c1-2]);
  P_current <- c(dataRB$Px[c1-1],dataRB$Py[c1-1],dataRB$Pz[c1-1]);
  P_post <- c(dataRB$Px[c1],dataRB$Py[c1],dataRB$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataRB$Time[c1-2]);
  T_current <- c(dataRB$Time[c1-1]);
  T_post <- c(dataRB$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataRB$V[c1-1] <- V;

  #print("V");
  #print(dataRB$V[c1-1]);

  #dataRB$preangle[c1-1] <- preangle;
  #dataRB$postangle[c1-1] <- postangle;
  #dataRB$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataRB$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataRB$V2[c1-2] <- ((dataRB$V2[c1-2]-dataRB$V2[c1-3])/(dataRB$Time[c1-2]-dataRB$Time[c1-3])+(dataRB$V2[c1-1]-dataRB$V2[c1-2])/(dataRB$Time[c1-1]-dataRB$Time[c1-2]))/2;
  }

  if(is.nan(preangle)){
    c1 <- c1-1;
    dataRB <- dataRB[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataRB <- dataRB[-c(c1), ]

  }
  }

  c1 <- c1+1;

}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DRB")


#Calibration LR
#print("LR1")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataLR$Phase[c0] == "Calibration" || dataLR$Phase[c0] == "Calibrations") {
  calw <- dataLR$wquat[c0] + calw;
  calx <- dataLR$xquat[c0] + calx;
  caly <- dataLR$yquat[c0] + caly;
  calz <- dataLR$zquat[c0] + calz;
  c0 <- c0+1;
}
#print("LR2")

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;
#print("LR3")

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);
#print("LR3.5")
  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);
#print("LR4")

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);

  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors LR
#print("BLR")
c1 <- 1;
while (!is.na(dataLR$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataLR$wquat[c1];
  q1 <- dataLR$xquat[c1];
  q2 <- dataLR$yquat[c1];
  q3 <- dataLR$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);

  dataLR$Px[c1] <- P_i[1];
  dataLR$Py[c1] <- P_i[2];
  dataLR$Pz[c1] <- P_i[3];

  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);

  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);

  dataLR$Ptx[c1] <- P_it[1];
  dataLR$Pty[c1] <- P_it[2];
  dataLR$Ptz[c1] <- P_it[3];

  dataLR$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataLR$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));

  if(P_it[3] < 0){
    dataLR$roll[c1] <- 180-dataLR$roll[c1];
  }
  if(P_it[2] < 0){
    dataLR$pitch[c1] <- -dataLR$pitch[c1];
  }
  if(P_it[1] < 0){
    dataLR$roll[c1] <- -dataLR$roll[c1];
  }

  dataLR$pitch[c1] <- round(dataLR$pitch[c1]/pi*180,3);
  dataLR$roll[c1] <- round(dataLR$roll[c1]/pi*180,3);

  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  #
  # dataLR$Rxx[c1] <- Px[1];
  # dataLR$Rxy[c1] <- Px[2];
  # dataLR$Rxz[c1] <- Px[3];
  # dataLR$Ryx[c1] <- Py[1];
  # dataLR$Ryy[c1] <- Py[2];
  # dataLR$Ryz[c1] <- Py[3];
  # dataLR$Rzx[c1] <- Pz[1];
  # dataLR$Rzy[c1] <- Pz[2];
  # dataLR$Rzz[c1] <- Pz[3];
  #print("CLR")
  if(c1 > 2){

  P_pre <- c(dataLR$Px[c1-2],dataLR$Py[c1-2],dataLR$Pz[c1-2]);
  P_current <- c(dataLR$Px[c1-1],dataLR$Py[c1-1],dataLR$Pz[c1-1]);
  P_post <- c(dataLR$Px[c1],dataLR$Py[c1],dataLR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataLR$Time[c1-2]);
  T_current <- c(dataLR$Time[c1-1]);
  T_post <- c(dataLR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataLR$V[c1-1] <- V;

  #print("V");
  #print(dataLR$V[c1-1]);

  #dataLR$preangle[c1-1] <- preangle;
  #dataLR$postangle[c1-1] <- postangle;
  #dataLR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataLR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataLR$V2[c1-2] <- ((dataLR$V2[c1-2]-dataLR$V2[c1-3])/(dataLR$Time[c1-2]-dataLR$Time[c1-3])+(dataLR$V2[c1-1]-dataLR$V2[c1-2])/(dataLR$Time[c1-1]-dataLR$Time[c1-2]))/2;
  }


  if(is.nan(preangle)){
    c1 <- c1-1;
    dataLR <- dataLR[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataLR <- dataLR[-c(c1), ]

  }
  }

  c1 <- c1+1;

}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DLR")

#Calibration VR
#print("AVR")
c0 <- 1;
calw <- 0;
calx <- 0;
caly <- 0;
calz <- 0;

while (dataVR$Phase[c0] == "Calibration") {
  calw <- dataVR$wquat[c0] + calw;
  calx <- dataVR$xquat[c0] + calx;
  caly <- dataVR$yquat[c0] + caly;
  calz <- dataVR$zquat[c0] + calz;
  c0 <- c0+1;
}

q0 <- calw/(c0-1);
q1 <- calx/(c0-1);
q2 <- caly/(c0-1);
q3 <- calz/(c0-1);

# First row of the rotation matrix
r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
r01 <- 2 * (q1 * q2 - q0 * q3);
r02 <- 2 * (q1 * q3 + q0 * q2);

# Second row of the rotation matrix
r10 <- 2 * (q1 * q2 + q0 * q3);
r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
r12 <- 2 * (q2 * q3 - q0 * q1);

# Third row of the rotation matrix
r20 <- 2 * (q1 * q3 - q0 * q2);
r21 <- 2 * (q2 * q3 + q0 * q1);
r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

# 3x3 rotation matrix
C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
calquat <- matrix(C,nrow=3,ncol=3);
# print(c0);
# print("calquat");
# print(calquat);
calquatinv <- inv(calquat);

  X_n <- c(1,0,0);
  Y_n <- c(0,1,0);
  Z_n <- c(0,0,1);

  Px <- c(calquat[1,1]*X_n[1]+calquat[1,2]*X_n[2]+calquat[1,3]*X_n[3],calquat[2,1]*X_n[1]+calquat[2,2]*X_n[2]+calquat[2,3]*X_n[3],calquat[3,1]*X_n[1]+calquat[3,2]*X_n[2]+calquat[3,3]*X_n[3]);
  Py <- c(calquat[1,1]*Y_n[1]+calquat[1,2]*Y_n[2]+calquat[1,3]*Y_n[3],calquat[2,1]*Y_n[1]+calquat[2,2]*Y_n[2]+calquat[2,3]*Y_n[3],calquat[3,1]*Y_n[1]+calquat[3,2]*Y_n[2]+calquat[3,3]*Y_n[3]);
  Pz <- c(calquat[1,1]*Z_n[1]+calquat[1,2]*Z_n[2]+calquat[1,3]*Z_n[3],calquat[2,1]*Z_n[1]+calquat[2,2]*Z_n[2]+calquat[2,3]*Z_n[3],calquat[3,1]*Z_n[1]+calquat[3,2]*Z_n[2]+calquat[3,3]*Z_n[3]);

transfermatrix <- matrix(0,nrow=3,ncol=3);
# transfermatrix[1,1] <- 1;
# transfermatrix[3,3] <- 1;
transfermatrix[1,1] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[1,3] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[2,2] <- 1;
transfermatrix[3,1] <- Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);
transfermatrix[3,3] <- Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]);

  P_ct <- c(Py[1]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]),0,Py[3]/sqrt(Py[1]*Py[1]+Py[3]*Py[3]));

  P_c <- c(calquatinv[1,1]*P_ct[1]+calquatinv[1,2]*P_ct[2]+calquatinv[1,3]*P_ct[3],calquatinv[2,1]*P_ct[1]+calquatinv[2,2]*P_ct[2]+calquatinv[2,3]*P_ct[3],calquatinv[3,1]*P_ct[1]+calquatinv[3,2]*P_ct[2]+calquatinv[3,3]*P_ct[3]);

rm(calw,calx,caly,calz,c0,C,X_n,Y_n,Z_n,Px,Py,Pz,calquat,calquatinv);

#Rotation to vectors VR
#print("BVR")
c1 <- 1;
while (!is.na(dataVR$Time[c1])) {
  #Quaternion to rotation matrix

  #X_n <- c(1,0,0);
  #Y_n <- c(0,1,0);
  #Z_n <- c(0,0,1);

  q0 <- dataVR$wquat[c1];
  q1 <- dataVR$xquat[c1];
  q2 <- dataVR$yquat[c1];
  q3 <- dataVR$zquat[c1];

  # First row of the rotation matrix
  r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
  r01 <- 2 * (q1 * q2 - q0 * q3);
  r02 <- 2 * (q1 * q3 + q0 * q2);

  # Second row of the rotation matrix
  r10 <- 2 * (q1 * q2 + q0 * q3);
  r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
  r12 <- 2 * (q2 * q3 - q0 * q1);

  # Third row of the rotation matrix
  r20 <- 2 * (q1 * q3 - q0 * q2);
  r21 <- 2 * (q2 * q3 + q0 * q1);
  r22 <- 2 * (q0 * q0 + q3 * q3) - 1;

  # 3x3 rotation matrix
  C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
  rot_matrix = matrix(C,nrow=3,ncol=3);

  P_i <- c(rot_matrix[1,1]*P_c[1]+rot_matrix[1,2]*P_c[2]+rot_matrix[1,3]*P_c[3],rot_matrix[2,1]*P_c[1]+rot_matrix[2,2]*P_c[2]+rot_matrix[2,3]*P_c[3],rot_matrix[3,1]*P_c[1]+rot_matrix[3,2]*P_c[2]+rot_matrix[3,3]*P_c[3]);

  dataVR$Px[c1] <- P_i[1];
  dataVR$Py[c1] <- P_i[2];
  dataVR$Pz[c1] <- P_i[3];

  # print(c1);
  # print("transfermatrix");
  # print(transfermatrix);
  invtransfermatrix <- inv(transfermatrix);

  P_it <- c(invtransfermatrix[1,1]*P_i[1]+invtransfermatrix[1,2]*P_i[2]+invtransfermatrix[1,3]*P_i[3],invtransfermatrix[2,1]*P_i[1]+invtransfermatrix[2,2]*P_i[2]+invtransfermatrix[2,3]*P_i[3],invtransfermatrix[3,1]*P_i[1]+invtransfermatrix[3,2]*P_i[2]+invtransfermatrix[3,3]*P_i[3]);

  dataVR$Ptx[c1] <- P_it[1];
  dataVR$Pty[c1] <- P_it[2];
  dataVR$Ptz[c1] <- P_it[3];

  dataVR$pitch[c1] <- atan(sqrt(P_it[2]*P_it[2])/sqrt(P_it[1]*P_it[1]+P_it[3]*P_it[3]));
  dataVR$roll[c1] <- atan(sqrt(P_it[1]*P_it[1])/sqrt(P_it[3]*P_it[3]));

  if(P_it[3] < 0){
    dataVR$roll[c1] <- 180-dataVR$roll[c1];
  }
  if(P_it[2] < 0){
    dataVR$pitch[c1] <- -dataVR$pitch[c1];
  }
  if(P_it[1] < 0){
    dataVR$roll[c1] <- -dataVR$roll[c1];
  }

  dataVR$pitch[c1] <- round(dataVR$pitch[c1]/pi*180,3);
  dataVR$roll[c1] <- round(dataVR$roll[c1]/pi*180,3);

  # Px <- c(rot_matrix[1,1]*X_n[1]+rot_matrix[1,2]*X_n[2]+rot_matrix[1,3]*X_n[3],rot_matrix[2,1]*X_n[1]+rot_matrix[2,2]*X_n[2]+rot_matrix[2,3]*X_n[3],rot_matrix[3,1]*X_n[1]+rot_matrix[3,2]*X_n[2]+rot_matrix[3,3]*X_n[3]);
  # Py <- c(rot_matrix[1,1]*Y_n[1]+rot_matrix[1,2]*Y_n[2]+rot_matrix[1,3]*Y_n[3],rot_matrix[2,1]*Y_n[1]+rot_matrix[2,2]*Y_n[2]+rot_matrix[2,3]*Y_n[3],rot_matrix[3,1]*Y_n[1]+rot_matrix[3,2]*Y_n[2]+rot_matrix[3,3]*Y_n[3]);
  # Pz <- c(rot_matrix[1,1]*Z_n[1]+rot_matrix[1,2]*Z_n[2]+rot_matrix[1,3]*Z_n[3],rot_matrix[2,1]*Z_n[1]+rot_matrix[2,2]*Z_n[2]+rot_matrix[2,3]*Z_n[3],rot_matrix[3,1]*Z_n[1]+rot_matrix[3,2]*Z_n[2]+rot_matrix[3,3]*Z_n[3]);
  #
  # dataVR$Rxx[c1] <- Px[1];
  # dataVR$Rxy[c1] <- Px[2];
  # dataVR$Rxz[c1] <- Px[3];
  # dataVR$Ryx[c1] <- Py[1];
  # dataVR$Ryy[c1] <- Py[2];
  # dataVR$Ryz[c1] <- Py[3];
  # dataVR$Rzx[c1] <- Pz[1];
  # dataVR$Rzy[c1] <- Pz[2];
  # dataVR$Rzz[c1] <- Pz[3];
  #print("CVR")
  if(c1 > 2){

  P_pre <- c(dataVR$Px[c1-2],dataVR$Py[c1-2],dataVR$Pz[c1-2]);
  P_current <- c(dataVR$Px[c1-1],dataVR$Py[c1-1],dataVR$Pz[c1-1]);
  P_post <- c(dataVR$Px[c1],dataVR$Py[c1],dataVR$Pz[c1]);

  #print(P_pre);
  #print(P_current);
  #print(P_post);

  T_pre <- c(dataVR$Time[c1-2]);
  T_current <- c(dataVR$Time[c1-1]);
  T_post <- c(dataVR$Time[c1]);

  #print(T_pre);
  #print(T_current);
  #print(T_post);


  suppressWarnings(preangle <- acos( sum(P_pre*P_current) / ( sqrt(sum(P_pre * P_pre)) * sqrt(sum(P_current * P_current)))))

  suppressWarnings(postangle <- acos(sum(P_pre*P_post) / ( sqrt(sum(P_current * P_current)) * sqrt(sum(P_post * P_post)))))

  #print(preangle);
  #print(postangle);

  preangle <- preangle/pi*180;
  postangle <- postangle/pi*180;

  #print("angles");
  #print(preangle);
  #print(postangle);

  #print("timesteps");
  #print(T_current-T_pre);
  #print(T_post-T_current);

  V <- (preangle/(T_current-T_pre)+postangle/(T_post-T_current))/2;

  dataVR$V[c1-1] <- V;

  #print("V");
  #print(dataVR$V[c1-1]);

  #dataVR$preangle[c1-1] <- preangle;
  #dataVR$postangle[c1-1] <- postangle;
  #dataVR$timestep_pre[c1-1] <- (T_current-T_pre);
  #dataVR$timestep_post[c1-1] <- (T_post-T_current);
  
  if(c1 > 3){
    dataVR$V2[c1-2] <- ((dataVR$V2[c1-2]-dataVR$V2[c1-3])/(dataVR$Time[c1-2]-dataVR$Time[c1-3])+(dataVR$V2[c1-1]-dataVR$V2[c1-2])/(dataVR$Time[c1-1]-dataVR$Time[c1-2]))/2;
  }

  if(is.nan(preangle)){
    c1 <- c1-1;
    dataVR <- dataVR[-c(c1), ]
  }

  if(is.nan(postangle)){
    c1 <- c1-1;
    dataVR <- dataVR[-c(c1), ]

  }
  }

  c1 <- c1+1;

}
rm(c1,C,q0,q1,q2,q3,r00,r01,r02,r10,r11,r12,r20,r21,r22,P_pre,P_current,P_post,T_pre,T_current,T_post,preangle,postangle,V,rot_matrix,transfermatrix,invtransfermatrix);
#print("DVR")

assign(nameRB2[i], dataRB);
assign(nameLR2[i], dataLR);
assign(nameVR2[i], dataVR);

print(i);
i <- i + 1;

};

rm(i, nameLR1,nameLR2,nameRB1,nameRB2,nameVR1,nameVR2,dataLR,dataRB,dataVR,P_c,P_ct,P_i,P_it)
setwd("/cloud/project/Recordings");

```

```{r}

# i <- 1;
# setwd("/cloud/project/Recordings/TidyRecordings");
# 
# nameRB1 <- expand.grid('UserStudy',1:9,'RB.csv');
# nameRB1 <- apply(nameRB1,1,paste0,collapse = "");
# nameLR1 <- expand.grid('UserStudy',1:9,'LR.csv');
# nameLR1 <- apply(nameLR1,1,paste0,collapse = "");
# nameVR1 <- expand.grid('UserStudy',1:9,'VR.csv');
# nameVR1 <- apply(nameVR1,1,paste0,collapse = "");
# 
# 
# while (i < 10) {
# 
# dataRB <- read.csv(file = nameRB1[i]);
# dataLR <- read.csv(file = nameLR1[i]);
# dataVR <- read.csv(file = nameVR1[i]);
# 
# assign(nameRB1[i], dataRB);
# assign(nameLR1[i], dataLR);
# assign(nameVR1[i], dataVR);
# 
# print(i);
# i <- i + 1;
# };
# 
# n <- 1;
# 
# nameRB2 <- expand.grid('UserStudy',10:31,'RB.csv');
# nameRB2 <- apply(nameRB2,1,paste0,collapse = "");
# nameLR2 <- expand.grid('UserStudy',10:31,'LR.csv');
# nameLR2 <- apply(nameLR2,1,paste0,collapse = "");
# nameVR2 <- expand.grid('UserStudy',10:31,'VR.csv');
# nameVR2 <- apply(nameVR2,1,paste0,collapse = "");
# 
# 
# while (n < 23) {
#   
# dataRB <- read.csv(file = nameRB2[n]);
# dataLR <- read.csv(file = nameLR2[n]);
# dataVR <- read.csv(file = nameVR2[n]);
# 
# assign(nameRB2[n], dataRB);
# assign(nameLR2[n], dataLR);
# assign(nameVR2[n], dataVR);
# 
# print(n+9);
#    
# n <- n + 1;
# };
# 
# setwd("/cloud/project/Recordings");

```

```{r}
#data tidying

#myfiles  %>%
#select(TimeSinceStartup)

```

```{r}
#data export

i <- 1

setwd("/cloud/project/Recordings/Clean");

nameRB1 <- expand.grid('US',1:9,'RB.csv');
nameRB1 <- apply(nameRB1,1,paste0,collapse = "");
nameLR1 <- expand.grid('US',1:9,'LR.csv');
nameLR1 <- apply(nameLR1,1,paste0,collapse = "");
nameVR1 <- expand.grid('US',1:9,'VR.csv');
nameVR1 <- apply(nameVR1,1,paste0,collapse = "");
nameRB2 <- expand.grid('US',1:31,'RB.csv');
nameRB2 <- apply(nameRB2,1,paste0,collapse = "");
nameLR2 <- expand.grid('US',1:31,'LR.csv');
nameLR2 <- apply(nameLR2,1,paste0,collapse = "");
nameVR2 <- expand.grid('US',1:31,'VR.csv');
nameVR2 <- apply(nameVR2,1,paste0,collapse = "");

while (i < 10) {
  write.csv(nameRB1[i], nameRB1[i], row.names=TRUE);
  write.csv(nameLR1[i], nameLR1[i], row.names=TRUE);
  write.csv(nameVR1[i], nameVR1[i], row.names=TRUE);
  i <- i+1;
}

while (i < 26) {
  write.csv(nameRB2[i], nameRB2[i], row.names=TRUE);
  write.csv(nameLR2[i], nameLR2[i], row.names=TRUE);
  write.csv(nameVR2[i], nameVR2[i], row.names=TRUE);
  i <- i+1;
}

rm(nameRB1,nameRB2,nameLR1,nameLR2,nameVR1,nameVR2,i);

```

```{r}
# 
# #Quaternion to rotation matrix
# 
# R <- c(0,0,0);
# X_v <- c(1,0,0);
# Y_v <- c(0,1,0);
# Z_v <- c(0,0,1);
# 
# q0 <- US1LR.csv$wquat[10];
# q1 <- US1LR.csv$xquat[10];
# q2 <- US1LR.csv$yquat[10];
# q3 <- US1LR.csv$zquat[10];
# 
# #x <- 1;
# #y <- 0;
# #z <- 0;
# #w <- 0;
# 
# # First row of the rotation matrix
# r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
# r01 <- 2 * (q1 * q2 - q0 * q3);
# r02 <- 2 * (q1 * q3 + q0 * q2);
# 
# # Second row of the rotation matrix
# r10 <- 2 * (q1 * q2 + q0 * q3);
# r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
# r12 <- 2 * (q2 * q3 - q0 * q1);
# 
# # Third row of the rotation matrix
# r20 <- 2 * (q1 * q3 - q0 * q2);
# r21 <- 2 * (q2 * q3 + q0 * q1);
# r22 <- 2 * (q0 * q0 + q3 * q3) - 1;
# 
# # 3x3 rotation matrix
# C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
# rot_matrix = matrix(C,nrow=3,ncol=3);
# print(rot_matrix);
#   
# R = rot_matrix*X_v;
# 
# print(R);
# print(X_v);
# print(rot_matrix);
# 
#   # num1 <- x;
#   # num2 <- y;
#   # num3 <- z;
#   # num4 <- x * num1;
#   # num5 <- y * num2;
#   # num6 <- z * num3;
#   # num7 <- x * num2;
#   # num8 <- x * num3;
#   # num9 <- y * num3;
#   # num10 <- w * num1;
#   # num11 <- w * num2;
#   # num12 <- w * num3;
# 
# #R[1] = ((1.0 - (num5 + num6)) * point.x + (num7 - num12) * point.y + (num8 + num11) * point.z);
# #R[2] = ((num7 + num12) * point.x + (1.0 - (num4 + num6)) * point.y + (num9 - num10) * point.z); 
# #R[3] =  ((num8 - num11) * point.x + (num9 + num10) * point.y + (1.0 - (num4 + num5)) * point.z);

```

```{r}
# #Euler angles to rotation matrix
# 
# #Order <- c("xyz");
# Order <- c("zyx");
# X_angle <- US1LR.csv$xrot[10];
# Y_angle <- US1LR.csv$yrot[10];
# Z_angle <- US1LR.csv$zrot[10];
# 
# X_angle = X_angle/180*pi;
# Y_angle = Y_angle/180*pi;
# Z_angle = Z_angle/180*pi;
# 
# Mx <- matrix(0,nrow=3,ncol=3);
#   Sx <- sin(X_angle);
#   Sy <- sin(Y_angle);
#   Sz <- sin(Z_angle);
#   Cx <- cos(X_angle);
#   Cy <- cos(Y_angle);
#   Cz <- cos(Z_angle);
# 
# if(Order == "xyz"){
# #case ORDER_XYZ:
#         Mx[0][0]=Cy*Cz;
#         Mx[0][1]=-Cy*Sz;
#         Mx[0][2]=Sy;
#         Mx[1][0]=Cz*Sx*Sy+Cx*Sz;
#         Mx[1][1]=Cx*Cz-Sx*Sy*Sz;
#         Mx[1][2]=-Cy*Sx;
#         Mx[2][0]=-Cx*Cz*Sy+Sx*Sz;
#         Mx[2][1]=Cz*Sx+Cx*Sy*Sz;
#         Mx[2][2]=Cx*Cy;
# }
# 
# 
# if(Order == "zyx"){
# #case ORDER_ZYX:
#         Mx[0][0]=Cy*Cz;
#         Mx[0][1]=Cz*Sx*Sy-Cx*Sz;
#         Mx[0][2]=Cx*Cz*Sy+Sx*Sz;
#         Mx[1][0]=Cy*Sz;
#         Mx[1][1]=Cx*Cz+Sx*Sy*Sz;
#         Mx[1][2]=-Cz*Sx+Cx*Sy*Sz;
#         Mx[2][0]=-Sy;
#         Mx[2][1]=Cy*Sx;
#         Mx[2][2]=Cx*Cy;
# }
# 
# print(Mx);

```

```{r}
# #speed and acceleration calculations
# 
# P_p <- c(1,0,0);
# P <- c(0,1,0);
# P_a <- c(0,0,1);
# 
# preangle <- acos( sum(P_p*P) / ( sqrt(sum(P_p * P_p)) * sqrt(sum(P * P)) ) );
# postangle <- acos( sum(P*P_a) / ( sqrt(sum(P * P)) * sqrt(sum(P_a * P_a)) ) );
# 
# #print(preangle);
# #print(postangle);
# 
# #angular_speed <- (preangle/pretime + postangle/posttime)/2;

```

```{r}
# #getting the head vector and calculating absolute spherical angles
# 
# rot_matrix_inv <- inv(rot_matrix);
# print(rot_matrix);
# print(rot_matrix_inv);
# print(rot_matrix*rot_matrix_inv);
# 
# #Mx_inv <- inv(Mx);
# #print(Mx*Mx_inv);

```

```{r}
# c0 <- 1
# calw <- 0
# calx <- 0
# caly <- 0
# calz <- 0
# while (US1LR.csv$Phase[c0] == "Calibration") {
#   calw <- US1LR.csv$wquat[c0] + calw;
#   calx <- US1LR.csv$xquat[c0] + calx;
#   caly <- US1LR.csv$yquat[c0] + caly;
#   calz <- US1LR.csv$zquat[c0] + calz;
#   c0 <- c0+1;
# }
# 
# q0 <- calw/(c0-1);
# q1 <- calx/(c0-1);
# q2 <- caly/(c0-1);
# q3 <- calz/(c0-1);
# 
# # First row of the rotation matrix
# r00 <- 2 * (q0 * q0 + q1 * q1) - 1;
# r01 <- 2 * (q1 * q2 - q0 * q3);
# r02 <- 2 * (q1 * q3 + q0 * q2);
# 
# # Second row of the rotation matrix
# r10 <- 2 * (q1 * q2 + q0 * q3);
# r11 <- 2 * (q0 * q0 + q2 * q2) - 1;
# r12 <- 2 * (q2 * q3 - q0 * q1);
# 
# # Third row of the rotation matrix
# r20 <- 2 * (q1 * q3 - q0 * q2);
# r21 <- 2 * (q2 * q3 + q0 * q1);
# r22 <- 2 * (q0 * q0 + q3 * q3) - 1;
# 
# # 3x3 rotation matrix
# C <- c(c(r00, r01, r02),c(r10, r11, r12),c(r20, r21, r22));
# calquat <- matrix(C,nrow=3,ncol=3);
# print(calquat);
# calquatinv <- inv(calquat);
# rm(calw,calx,caly,calz,c0,C,calquat)
# print(calquatinv);
# #Calibration <- 
# #  select(timestamp,w,x,y,z,focusobject);
# #sum()
# #Q <- c(sum()/count(),sum()/count(),sum()/count(),sum()/count())
# #Q*inv(Q)

```
